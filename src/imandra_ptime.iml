(* imandra-ptime

   Matt Bray, Imandra Inc
   Copyright (c) 2022

   Adapted from the ptime library (see license below).
*)
[@@@require "ptime"]

(*---------------------------------------------------------------------------
   Copyright (c) 2015 The ptime programmers. All rights reserved.
   Distributed under the ISC license, see terms at the end of the file.
  ---------------------------------------------------------------------------*)

(* Julian day and proleptic Gregorian calendar date conversion.

   Formulae are from the calendar FAQ:
   http://www.tondering.dk/claus/cal/julperiod.php#formula

   These formulae work for positive Julian days. They represent
   Gegorian calendar BCE year `y` by `-(y-1)`, e.g. 2 BCE is -1, this
   follows the convention of ISO 8601.

   All timestamps in Ptime's [min;max] range are represented by
   positive Julian days and the formulae do not overflow on 32-bit
   platforms in this restricted range. *)

let jd_to_date jd =
  let a = jd + 32044 in
  let b = ((4 * a) + 3) / 146097 in
  let c = a - (146097 * b / 4) in
  let d = ((4 * c) + 3) / 1461 in
  let e = c - (1461 * d / 4) in
  let m = ((5 * e) + 2) / 153 in
  let day = e - (((153 * m) + 2) / 5) + 1 in
  let month = m + 3 - (12 * (m / 10)) in
  let year = (100 * b) + d - 4800 + (m / 10) in
  (year, month, day)

let jd_of_date (year, month, day) =
  let a = (14 - month) / 12 in
  let y = year + 4800 - a in
  let m = month + (12 * a) - 3 in
  day
  + (((153 * m) + 2) / 5)
  + (365 * y) + (y / 4) - (y / 100) + (y / 400) - 32045

let jd_posix_epoch = 2_440_588 (* the Julian day of the POSIX epoch *)

let jd_ptime_min = 1_721_060 (* the Julian day of Ptime.min *)

let jd_ptime_max = 5_373_484 (* the Julian day of Ptime.max *)

(* Picosecond precision POSIX timestamps and time span representation.

   POSIX timestamps and spans are represented by int * int64 pairs
   with the int64 in the range [0L;86_399_999_999_999_999L]. A pair
   [(d, ps)] denotes the POSIX picosecond duration [d] * 86_400e12 +
   [ps].

   For a timestamp this can be seen as a POSIX day count from the
   epoch paired with a picosecond precision POSIX time point in that
   day starting from 00:00:00.

   By definition with a negative [d] the [ps] duration brings us
   towards zero, *not* towards infinity:


         (d * 86_400e12) (d * 86_400e12 + ps)       0
     ... -----+-----------------+-------------------+--------- ...
              [---------------->|
                   ps

   [d] is largely sufficent to represent all the days in Ptime's
   [min;max] range on both 32-bit and 64-bit platforms. *)

type t = int * int

let ps_count_in_ps = 1 [@@ocaml.warning "-32"]
let ps_count_in_ns = 1_000 [@@ocaml.warning "-32"]
let ps_count_in_100ns = 100_000 [@@ocaml.warning "-32"]
let ps_count_in_us = 1_000_000 [@@ocaml.warning "-32"]
let ps_count_in_100us = 100_000_000 [@@ocaml.warning "-32"]
let ps_count_in_ms = 1_000_000_000 [@@ocaml.warning "-32"]
let ps_count_in_100ms = 100_000_000_000 [@@ocaml.warning "-32"]
let ps_count_in_s = 1_000_000_000_000 [@@ocaml.warning "-32"]
let ps_count_in_min = 60_000_000_000_000 [@@ocaml.warning "-32"]
let ps_count_in_hour = 3600_000_000_000_000 [@@ocaml.warning "-32"]
let ps_count_in_day = 86_400_000_000_000_000 [@@ocaml.warning "-32"]
let s_count_in_day = 86_400
let ps_day_max = 86_399_999_999_999_999
let day_min = jd_ptime_min - jd_posix_epoch
let day_max = jd_ptime_max - jd_posix_epoch
let epoch = (0, 0) (* 1970-01-01 00:00:00 UTC *)

let min = (day_min, 0) (* 0000-01-01 00:00:00 UTC *)

let max = (day_max, ps_day_max) (* 9999-12-31 23:59:59 UTC *)

(* POSIX time spans *)

type span = t

module Int_ = struct
  let compare x y = if x < y then -1 else if x = y then 0 else 1
end

module Span = struct
  let stdlib_abs = abs

  (* Arithmetic *)

  let neg = function
    | d, 0 -> (-d, 0)
    | d, ps -> (-(d + 1), ps_count_in_day - ps)

  let add (d0, ps0) (d1, ps1) =
    let d = d0 + d1 in
    let ps = ps0 + ps1 in
    let ps_clamp = ps mod ps_count_in_day in
    let d = d + Int_.compare ps ps_clamp in
    (d, ps_clamp)

  let sub s0 s1 = add s0 (neg s1)
  let abs ((d, _) as s) = if d < 0 then neg s else s

  (* POSIX time spans *)

  type t = span

  let zero = (0, 0)

  let of_d_ps : int * int -> t option =
   fun ((_d, ps) as s) -> if ps < 0 || ps > ps_day_max then None else Some s

  let unsafe_of_d_ps s = s
  let unsafe_of_d_ps_option s = s
  let to_d_ps s = s

  let of_int_s secs =
    let d = stdlib_abs secs in
    let s = (d / s_count_in_day, d mod s_count_in_day * ps_count_in_s) in
    if secs < 0 then neg s else s

  let to_int_s (d, ps) =
    let days_s = d * s_count_in_day in
    let day_s = ps / ps_count_in_s in
    let secs = days_s + day_s in
    secs

  (* Predicates *)

  let equal (d0, ps0) (d1, ps1) =
    Int_.compare d0 d1 = 0 && Int_.compare ps0 ps1 = 0

  let compare (d0, ps0) (d1, ps1) =
    let c = Int_.compare d0 d1 in
    if c <> 0 then c else Int_.compare ps0 ps1

  (* Rounding *)

  let round_div a b =
    (* a >= 0 and b > 0 *)
    if a = 0 then 0 else (a + (b / 2)) / b

  let frac_div = function
    | 0 -> 1_000_000_000_000
    | 1 -> 100_000_000_000
    | 2 -> 10_000_000_000
    | 3 -> 1_000_000_000
    | 4 -> 100_000_000
    | 5 -> 10_000_000
    | 6 -> 1_000_000
    | 7 -> 100_000
    | 8 -> 10_000
    | 9 -> 1_000
    | 10 -> 100
    | 11 -> 10
    | 12 -> 1
    | _ -> 1

  let round ~frac_s:frac ((sign, _) as t) =
    let frac = if frac < 0 then 0 else if frac > 12 then 12 else frac in
    let d, ps = if sign < 0 then neg t else t in
    let rps = round_div ps (frac_div frac) * frac_div frac in
    let t = if rps > ps_day_max then (d + 1, 0) else (d, rps) in
    if sign < 0 then neg t else t

  let truncate ~frac_s:frac ((sign, _) as t) =
    let frac = if frac < 0 then 0 else if frac > 12 then 12 else frac in
    let d, ps = if sign < 0 then neg t else t in
    let tps = ps - (ps mod frac_div frac) in
    if sign < 0 then neg (d, tps) else (d, tps)

  let truncate_down ~frac_s:frac (d, ps) = (d, ps - (ps mod frac_div frac))

  (* Pretty printing *)

  let to_ptime_span (d, ps) =
    (* Z.to_int is safe as we're always within Ptime's day_min and day_max *)
    Ptime.Span.unsafe_of_d_ps (Z.to_int d, Z.to_int64 ps)
    [@@program]

  let of_ptime_span s =
    let d, ps = Ptime.Span.to_d_ps s in
    (Z.of_int d, Z.of_int64 ps)
    [@@program]

  let conv1 f a1 s = f a1 (to_ptime_span s) [@@program]
  let dump = conv1 Ptime.Span.dump [@@program]
  let pp = conv1 Ptime.Span.pp [@@program]
end

(* POSIX timestamps *)

let unsafe_of_d_ps s = s

let of_span ((d, _) as span) =
  if d < day_min || d > day_max then None else Some span

let to_span t = t
let truncate = Span.truncate_down
let frac_s (_, ps) = (0, ps mod ps_count_in_s)

(* Predicates *)

let equal = Span.equal
let compare = Span.compare
let is_earlier t ~than = compare t than = -1
let is_later t ~than = compare t than = 1

(* POSIX arithmetic *)

let add_span t d = of_span (Span.add t d)
let sub_span t d = of_span (Span.sub t d)
let diff t1 t0 = Span.sub t1 t0

(* Time zone offsets between local and UTC timelines *)

type tz_offset_s = int

(* Date-time conversion

   POSIX time counts seconds since 1970-01-01 00:00:00 UTC without
   counting leap seconds -- when a leap second occurs a POSIX second
   can be two SI seconds or zero SI second. Hence 86400 POSIX seconds
   always represent an UTC day and the translations below are accurate
   without having to refer to a leap seconds table. *)

type date = int * int * int
type time = (int * int * int) * tz_offset_s

let max_month_day y m =
  (* max day number in a given year's month. *)
  let is_leap_year y = y mod 4 = 0 && (y mod 100 <> 0 || y mod 400 = 0) in
    match m with
    | 1 -> 31
    | 2 when is_leap_year y -> 29
    | 2 -> 28
    | 3 -> 31
    | 4 -> 30
    | 5 -> 31
    | 6 -> 30
    | 7 -> 31
    | 8 -> 31
    | 9 -> 30
    | 10 -> 31
    | 11 -> 30
    | 12 -> 31
    | _ -> 31

let is_date_valid (y, m, d) =
  0 <= y && y <= 9999 && 1 <= m && m <= 12 && 1 <= d && d <= max_month_day y m

let is_time_valid ((hh, mm, ss), _) =
  0 <= hh && hh <= 23 && 0 <= mm && mm <= 59 && 0 <= ss && ss <= 60

let of_date_time (date, (((hh, mm, ss), tz_offset_s) as t)) =
  (* We first verify that the given date and time are Ptime-valid.
     Once this has been established we find find the number of Julian
     days since the epoch for the given proleptic Georgian calendar
     date. This gives us the POSIX day component of the timestamp. The
     remaining time fields are used to derive the picosecond precision
     time in that day compensated by the time zone offset. The final
     result is checked to be in Ptime's [min;max] range.

     By definition POSIX timestamps cannot represent leap seconds.
     With the code below any date-time with a seconds value of 60
     (leap second addition) is mapped to the POSIX timestamp that
     happens 1 second later which is what POSIX mktime would to. Any
     formally non-existing UTC date-time with a seconds value of 59
     (leap second subtraction) is mapped on the POSIX timestamp that
     represents this non existing instant. *)
  if not (is_date_valid date && is_time_valid t) then None
  else
    let d = jd_of_date date - jd_posix_epoch in
    let hh_ps = hh * ps_count_in_hour in
    let mm_ps = mm * ps_count_in_min in
    let ss_ps = ss * ps_count_in_s in
    let ps = hh_ps + (mm_ps + ss_ps) in
    sub_span (d, ps) (Span.of_int_s tz_offset_s)

let to_date_time ?(tz_offset_s = 0) t =
  (* To render the timestamp in the given time zone offset we first
     express the timestamp in local time and then compute the date
     fields on that stamp as if it were UTC. If the local timestamp is
     not in [min;max] then its date fields cannot be valid according
     to the constraints guaranteed by Ptime and we fallback to UTC,
     i.e. a time zone offset of 0.

     We then apply the following algorithm whose description makes
     sense on a POSIX timestamp (i.e. UTC) but works equally well to
     render the date-time fields of a local timestamp.

     We first take take the POSIX day count [d] (equivalent by
     definition to an UTC day count) from the epoch, convert it to a
     Julian day and use this to get the proleptic Gregorian calendar
     date. The POSIX picoseconds [ps] in the day are are converted to
     a daytime according to to its various units.

     By definition no POSIX timestamp can represent a date-time with a
     seconds value of 60 (leap second addition) and thus the function
     will never return a date-time with such a value.  On the other
     hand it will return an inexisting UTC date-time with a seconds
     value of 59 whenever a leap second is subtracted since there is a
     POSIX timestamp that represents this instant. *)
  let (d, ps), tz_offset_s =
    match add_span t (Span.of_int_s tz_offset_s) with
    | None -> (t, 0) (* fallback to UTC *)
    | Some local -> (local, tz_offset_s)
  in
  let jd = d + jd_posix_epoch in
  let date = jd_to_date jd in
  let hh = ps / ps_count_in_hour in
  let hh_rem = ps mod ps_count_in_hour in
  let mm = hh_rem / ps_count_in_min in
  let mm_rem = hh_rem mod ps_count_in_min in
  let ss = mm_rem / ps_count_in_s in
  (date, ((hh, mm, ss), tz_offset_s))

let of_date date = of_date_time (date, ((00, 00, 00), 0))
let to_date t = fst (to_date_time ~tz_offset_s:0 t)

type weekday = Thu | Fri | Sat | Sun | Mon | Tue | Wed

let weekday ?(tz_offset_s = 0) t =
  let wday = (* Epoch was a thursday *)
    function
    | 0 -> Thu
    | 1 -> Fri
    | 2 -> Sat
    | 3 -> Sun
    | 4 -> Mon
    | 5 -> Tue
    | 6 -> Wed
    | _ -> Wed
  in
  let d, _ = Span.add t (Span.of_int_s tz_offset_s) in
  (* N.B. in contrast to [to_date_time] we don't care if we fall outside
      [min;max]. Even if it happens the result of the computation is still
      correct *)
  let i = d mod 7 in
  wday (if i < 0 then 7 + i else i)

(* RFC 3339 timestamp conversions *)

(* RFC 3339 timestamp parser *)

let to_ptime (d, ps) = Ptime.unsafe_of_d_ps (Z.to_int d, Z.to_int64 ps)
  [@@program]

let of_ptime t =
  let d, ps = Ptime.to_span t |> Ptime.Span.to_d_ps in
  (Z.of_int d, Z.of_int64 ps)
  [@@program]

let conv1 f a1 s = f a1 (to_ptime s) [@@program]
let pp_rfc3339_error = Ptime.pp_rfc3339_error [@@program]
let rfc3339_error_to_msg = Ptime.rfc3339_error_to_msg [@@program]

let of_rfc3339 ?strict ?sub ?start s =
  Ptime.of_rfc3339 ?strict ?sub ?start s
  |> CCResult.map (fun (t, tz_offset_s, count) ->
         (of_ptime t, Option.map Z.of_int tz_offset_s, count))
  [@@program]

(* RFC 3339 timestamp formatter *)

let to_rfc3339 ?space ?frac_s ?tz_offset_s t =
  Ptime.to_rfc3339 ?space ?frac_s
    ?tz_offset_s:(Option.map Z.to_int tz_offset_s)
    (to_ptime t)
  [@@program]

let pp_rfc3339 ?space ?frac_s ?tz_offset_s () ppf t =
  Ptime.pp_rfc3339 ?space ?frac_s
    ?tz_offset_s:(Option.map Z.to_int tz_offset_s)
    () ppf (to_ptime t)
  [@@program]

(* Pretty printing *)

let pp_human ?frac_s ?tz_offset_s () ppf t =
  Ptime.pp_human ?frac_s
    ?tz_offset_s:(Option.map Z.to_int tz_offset_s)
    () ppf (to_ptime t)
  [@@program]

let pp = conv1 Ptime.pp [@@program]
let dump = Span.dump [@@program]

(*---------------------------------------------------------------------------
   Copyright (c) 2015 The ptime programmers

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  ---------------------------------------------------------------------------*)
